# Q.4 10점
#
# x축과 y축으로 이루어진 2차원 직교 좌표계에 중심이 원점인
# 서로 다른 크기의 원이 두 개 주어집니다.
# 반지름을 나타내는 두 정수 r1, r2가 매개변수로 주어질 때,
# 두 원 사이의 공간에 x좌표와 y좌표가 모두 정수인 점의 개수를
# return하도록 solution 함수를 완성해주세요.
# ※ 각 원 위의 점도 포함하여 셉니다.
#
# 제한사항
# 1 ≤ r1 < r2 ≤ 1,000,000
import math
# 표준 라이브러리 중 math를 써야 하므로 import로 입력한다.
def solution(r1, r2):
    answer = 0
    for i in range(1, r2 + 1): 
    # r1과 r2가 모두 정수이므로 가장 작은 정수인 1로 하여 1부터 r2>r1이므로 #r2+1까지 for문을 반복한다.
    # i 는 x=i를 의미한다.
    # 1 ~ r2까지 x = i인 직선의 교점을 구하는 것이다.
        if i< r1:
            s = math.ceil(math.sqrt((r1**2 - i**2)))
            #math.sqrt() 함수는 괄호안의 값에 제곱근 씌운값을 출력한다.
            # float형이므로 음수가 들어올 수 없다. 따라서 i가 r1보다 #작으므로 .sqrt를 사용할 수 있다. 
            #math.ceil()은 괄호 안의 값을 반올림한 값으로 출력한다.
            #.ceil로 출력한 값은 정수(int형)이다.
            #따라서 s는 r1보다 큰 정수중에 가장 r1과 가까운 정수를 의미한다.
        else:
            s = 0
            #만약 i >= r1 이라면 r1과 i의 교점이 없어 r2보다 작으면서 #r1보다 큰 정수들중 r1과 가장 가까운 정수를 구할 수 없게 된다. 

        e = math.floor(math.sqrt((r2**2 - i**2)))
        # math.floor()는 괄호 안의 값을 반내림한 값을 출력한다.
        # e는 r2보다 작은 정수 중 가장 큰 정수를 의미한다.
        answer = (answer + e - s + 1) * 4
        # answer값은 교점의 개수를 의미하며 e-s+1는 r2보다 작은 정수들 중 #가장 큰 정수 와 r1보다 큰 정수들 중 가장 작은 정수사이의 개수를 #의미한다. 
        # x, y축을 기준으로 4등분을 하여 구한 값이므로 마지막에 *4를 하여 총 #개수를 구한다.

    return answer
while True:
    a = int(input("r1: "))
    b = int(input("r2: "))
    #input()으로 입력한 값은 문자열 형태인데 solution()은 정수형 값을 입력해야 하므로 a, b값을 정수형으로 바꿔주기 위해 앞에 int()를 입력했다.
    if not(1<= a < b):
        print("다시 입력하세요.(1<=a<b<=1,000,000)")
    elif not(a < b <= 1000000):
        print("다시 입력하세요.(1<=a<b<=1,000,000)")
    else:
        break
    # while문을 이용하여 (1<=r1<r2<=1,000,000)조건을 위반했을때 다시 입력하도록 했다.

result = solution(a, b)
print("result: ", result)
# r1과 r2 값을 입력받아 solution(r1,r2)에 적용하여 print()로 출력한다.